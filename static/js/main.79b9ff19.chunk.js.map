{"version":3,"sources":["components/NotFound.js","Assets/cold-bg.jpg","Assets/warm-bg1.jpg","App.js","index.js"],"names":["NotFound","setNotFound","className","onClick","App","searchTimeOut","useState","weatherData","setWeatherData","city","setCity","inputRef","useRef","notFound","useEffect","fetchData","str","a","url","process","fetch","res","json","data","cod","console","log","err","error","style","backgroundImage","length","main","temp","warm","cold","type","placeholder","onChange","undefined","clearTimeout","setTimeout","current","value","ref","map","eachWeather","index","name","sys","country","temp_min","temp_max","feels_like","weather","description","src","icon","width","height","alt","reactDOM","render","document","getElementById"],"mappings":"sNAGe,SAASA,EAAT,GAAoC,IAAhBC,EAAe,EAAfA,YACjC,OACE,sBAAKC,UAAU,cAAf,UACE,oBAAIA,UAAU,iBAAd,4DAGA,wBAAQC,QAAS,kBAAMF,GAAY,IAAnC,+BCTS,UAA0B,oCCA1B,MAA0B,qCCqH1BG,EA/GH,WACV,IAOIC,EAPJ,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAwBF,qBAAxB,mBAAOG,EAAP,KAAaC,EAAb,KAEMC,EAAWC,mBACjB,EAAgCN,oBAAS,GAAzC,mBAAOO,EAAP,KAAiBZ,EAAjB,KAoCA,OAtBAa,qBAAU,WACR,IACE,IAAMC,EAAS,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACVC,EADU,4DACiDF,EADjD,kBAC8DG,mCAD9D,0BAEEC,MAAMF,GAFR,cAEVG,EAFU,gBAGGA,EAAIC,OAHP,OAIC,SADXC,EAHU,QAIPC,IACPvB,GAAY,IAEZwB,QAAQC,IAAIH,GAEZf,EAAe,CAACe,KATF,2CAAH,sDAYXd,GACFM,EAAUN,GAEZ,MAAOkB,GACPF,QAAQG,MAAMD,MAEf,CAAClB,IAGF,qBACEP,UAAU,MAEV2B,MAAO,CACLC,gBACEvB,EAAYwB,OAAS,GAAKxB,EAAY,GAAGyB,KAAKC,KAAO,GAArD,cACWC,EADX,mBAEWC,EAFX,MALN,SAWGtB,EACC,cAACb,EAAD,CAAUC,YAAaA,IAEvB,gCACE,oBAAIC,UAAU,QAAd,+BAEA,uBACEA,UAAU,QACVkC,KAAK,OACLC,YAAY,eACZC,SAtDU,gBACIC,IAAlBlC,GAA6BmC,aAAanC,GAC9CA,EAAgBoC,YAEhB,WACE/B,EAAQC,EAAS+B,QAAQC,SAHkB,MAqDrCC,IAAKjC,IAGNJ,EAAYsC,KAAI,SAACC,EAAaC,GAAd,OACf,8BACGD,EAAYE,MACX,sBAAK9C,UAAU,cAAf,UACE,oBAAIA,UAAU,WAAd,mBACM4C,EAAYE,KADlB,aAC2BF,EAAYG,IAAIC,WAG3C,oBAAGhD,UAAU,eAAb,kCACwB4C,EAAYd,KAAKC,KADzC,WAIA,+CAMiBa,EAAYd,KAAKmB,SANlC,WAQA,2CAAcL,EAAYd,KAAKoB,SAA/B,WACA,oBAAGlD,UAAU,aAAb,yBACe4C,EAAYd,KAAKqB,WADhC,WAGA,mBAAGnD,UAAU,cAAb,SACG4C,EAAYQ,QAAQ,GAAGC,cAG1B,qBACEC,IAAG,4CAAuCV,EAAYQ,QAAQ,GAAGG,KAA9D,YACHC,MAAM,MACNC,OAAO,MACPC,IAAI,MACJ1D,UAAU,aAhCR6C,Y,cCrEtBc,EAASC,OAAO,cAAC,EAAD,IAAOC,SAASC,eAAe,U","file":"static/js/main.79b9ff19.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../components/Notfound.css\";\r\n\r\nexport default function NotFound({ setNotFound }) {\r\n  return (\r\n    <div className=\"notfound--c\">\r\n      <h1 className=\"notfound-title\">\r\n        Your weather wasn't found please search again.\r\n      </h1>\r\n      <button onClick={() => setNotFound(false)}>Return to home</button>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/cold-bg.1451658f.jpg\";","export default __webpack_public_path__ + \"static/media/warm-bg1.9e06bdf5.jpg\";","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport NotFound from \"./components/NotFound\";\nimport cold from \"./Assets/cold-bg.jpg\";\nimport warm from \"./Assets/warm-bg1.jpg\";\n\nconst App = () => {\n  const [weatherData, setWeatherData] = useState([]);\n  const [city, setCity] = useState();\n  // const [temp, setTemp] = useState();\n  const inputRef = useRef();\n  const [notFound, setNotFound] = useState(false);\n\n  //delaying the setting of the city to allow the user to search longer named places.\n  let searchTimeOut;\n  const handleInput = () => {\n    if (searchTimeOut !== undefined) clearTimeout(searchTimeOut);\n    searchTimeOut = setTimeout(callServerScript, 1000);\n\n    function callServerScript() {\n      setCity(inputRef.current.value);\n    }\n\n    //calling the api and setting the weather data, and preventing the api being called after every key press\n  };\n  useEffect(() => {\n    try {\n      const fetchData = async (str) => {\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${str}&appid=${process.env.REACT_APP_API_KEY}&units=metric`;\n        const res = await fetch(url);\n        const data = await res.json();\n        if (data.cod === \"404\") {\n          setNotFound(true);\n        } else {\n          console.log(data);\n\n          setWeatherData([data]);\n        }\n      };\n      if (city) {\n        fetchData(city);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }, [city]);\n\n  return (\n    <div\n      className=\"App\"\n      //SOLVING THE BACKGROUND Conditional\n      style={{\n        backgroundImage:\n          weatherData.length > 0 && weatherData[0].main.temp > 15\n            ? `url(${warm})`\n            : `url(${cold})`,\n      }}\n    >\n      {/*checking if the the notFound state is true or false*/}\n      {notFound ? (\n        <NotFound setNotFound={setNotFound} />\n      ) : (\n        <div>\n          <h1 className=\"title\">Find Your Weather</h1>\n\n          <input\n            className=\"input\"\n            type=\"text\"\n            placeholder=\"enter city..\"\n            onChange={handleInput}\n            ref={inputRef}\n          />\n          {/*mapping through the weather data object */}\n          {weatherData.map((eachWeather, index) => (\n            <div key={index}>\n              {eachWeather.name && (\n                <div className=\"display-box\">\n                  <h1 className=\"cityName\">\n                    {`${eachWeather.name}, ${eachWeather.sys.country}`}\n                  </h1>\n\n                  <p className=\"current-temp\">\n                    Current Temperature: {eachWeather.main.temp}째C\n                  </p>\n\n                  <p\n                  //double check this! for the background display\n                  // className={`${\n                  //   eachWeather.main.temp_min > 15 ? \"container--warm\" : \"App\"\n                  // }`}\n                  >\n                    Minimum Temp: {eachWeather.main.temp_min}째C\n                  </p>\n                  <p>Max Temp: {eachWeather.main.temp_max}째C</p>\n                  <p className=\"feels-like\">\n                    Feels like: {eachWeather.main.feels_like}째C\n                  </p>\n                  <p className=\"description\">\n                    {eachWeather.weather[0].description}\n                  </p>\n\n                  <img\n                    src={`https://openweathermap.org/img/wn/${eachWeather.weather[0].icon}@2x.png `}\n                    width=\"120\"\n                    height=\"120\"\n                    alt=\"img\"\n                    className=\"icon\"\n                  />\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\nexport default App;\n\n//TO DO!\n\n// return the input to empty after search\n","\nimport React from \"react\"\nimport App from \"./App.js\"\nimport reactDOM from \"react-dom\"\n\nreactDOM.render(<App/>,document.getElementById(\"root\"))"],"sourceRoot":""}